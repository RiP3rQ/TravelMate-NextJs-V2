// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  favoriteIds     String[] @db.ObjectId
  favoriteAttractionsIds String[] @db.ObjectId
  accounts        Account[]
  listings        Listing[]
  reservations    Reservation[]
  attractions     Attraction[]
  tickets         Ticket_for_Attraction[]
  listing_reviews         Listing_Review[]
  attraction_reviews      Attraction_Review[]
  trails          Trail[]
  trail_reviews   Trail_Review[]
}

model Account {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Listing {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  imageSrc          String
  createdAt         DateTime @default(now())
  category          String
  roomCount         Int
  bathroomCount     Int
  guestCount        Int
  lat               String
  long              String
  userId            String @db.ObjectId
  price             Int
  star              String
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations      Reservation[]
  listing_reviews           Listing_Review[]
}

model Reservation {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  listingId         String @db.ObjectId  
  startDate         DateTime
  endDate           DateTime
  totalPrice        Int
  createdAt         DateTime @default(now())
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing           Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Attraction {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  imageSrc          String
  createdAt         DateTime @default(now())
  category          String
  lat               String
  long              String
  userId            String @db.ObjectId
  paid              Boolean
  price             Int?
  star              String
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tickets           Ticket_for_Attraction[]
  attraction_reviews        Attraction_Review[]
}

model Ticket_for_Attraction {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  attractionId      String @db.ObjectId
  userId            String @db.ObjectId
  price             Int
  createdAt         DateTime @default(now())
  attraction        Attraction @relation(fields: [attractionId], references: [id], onDelete: Cascade)
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing_Review {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  listingId         String @db.ObjectId
  userId            String @db.ObjectId
  createdAt         DateTime @default(now())
  title             String
  description       String
  star              String
  imageSrc          String?
  listing           Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attraction_Review {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  attractionId      String @db.ObjectId
  userId            String @db.ObjectId
  createdAt         DateTime @default(now())
  title             String
  description       String
  star              String
  imageSrc          String?
  attraction        Attraction @relation(fields: [attractionId], references: [id], onDelete: Cascade)
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Trail {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  imageSrc          String
  createdAt         DateTime @default(now())
  category          String
  star              String
  locations         Location[]
  userId            String @db.ObjectId
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  trail_reviews     Trail_Review[]
}

model Location{
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  trailId           String @db.ObjectId
  lat               String
  long              String
  trail             Trail @relation(fields: [trailId], references: [id], onDelete: Cascade)
}

model Trail_Review {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  trailId           String @db.ObjectId
  userId            String @db.ObjectId
  createdAt         DateTime @default(now())
  title             String
  description       String
  star              String
  imageSrc          String?
  trail             Trail @relation(fields: [trailId], references: [id], onDelete: Cascade)
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
}